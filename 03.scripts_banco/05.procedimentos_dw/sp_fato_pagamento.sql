CREATE OR ALTER PROCEDURE SP_FATO_PAGAMENTO(@DATA_CARGA DATETIME)
AS
BEGIN
	DECLARE @COD_PAGAMENTO INT, @VALOR NUMERIC(10,2), @COD_UNIDADE INT, 
			@COD_PLANO INT, @DATA_PREVISTA DATE, @DATA_PAGAMENTO DATE

	DECLARE @ID_STATUS INT, @ID_UNIDADE INT, @ID_PLANO INT, 
			@ID_PREVISTA BIGINT, @ID_PAGAMENTO BIGINT

	DECLARE C_PAGAMENTO CURSOR FOR 
	SELECT COD_PAGAMENTO, VALOR, COD_UNIDADE, COD_PLANO, DATA_PREVISTA, DATA_PAGAMENTO
	FROM TB_AUX_PAGAMENTO
	WHERE DATA_CARGA = @DATA_CARGA

	OPEN C_PAGAMENTO
	FETCH C_PAGAMENTO INTO	@COD_PAGAMENTO, @VALOR, @COD_UNIDADE, 
							@COD_PLANO, @DATA_PREVISTA, @DATA_PAGAMENTO 
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		IF (@DATA_PAGAMENTO IS NULL)
		BEGIN
			SET @ID_STATUS = 1
		END
		ELSE
		BEGIN
			SET @ID_STATUS = 2
		END 
		
		SELECT @ID_UNIDADE = ID_UNIDADE 
		FROM DIM_UNIDADE
		WHERE @COD_UNIDADE = COD_UNIDADE

		SELECT @ID_PLANO = ID_PLANO
		FROM DIM_PLANO
		WHERE @COD_PLANO = COD_PLANO AND FL_CORRENTE = 'SIM'

		SELECT @ID_PREVISTA = ID_TEMPO
		FROM DIM_TEMPO
		WHERE @DATA_PREVISTA = DATA

		SELECT @ID_PAGAMENTO = ID_TEMPO
		FROM DIM_TEMPO
		WHERE @DATA_PAGAMENTO = DATA

		IF (@ID_UNIDADE IS NULL) 
		BEGIN
			INSERT INTO TB_VIO_PAGAMENTO
			VALUES (@data_carga, @VALOR, @COD_PAGAMENTO, @DATA_PAGAMENTO, @COD_UNIDADE, @COD_PLANO, @DATA_PREVISTA, getdate(), 'Id unidade não existe')
		END 
		ELSE IF (@ID_STATUS IS NULL) 
		BEGIN
			INSERT INTO TB_VIO_PAGAMENTO
			VALUES (@data_carga, @VALOR, @COD_PAGAMENTO, @DATA_PAGAMENTO, @COD_UNIDADE, @COD_PLANO, @DATA_PREVISTA, getdate(), 'Id status não existe')
		END 
		ELSE IF (@ID_PLANO IS NULL) 
		BEGIN
			INSERT INTO TB_VIO_PAGAMENTO
			VALUES (@data_carga, @VALOR, @COD_PAGAMENTO, @DATA_PAGAMENTO, @COD_UNIDADE, @COD_PLANO, @DATA_PREVISTA, getdate(), 'Id plano não existe')
		END 
		ELSE IF (@ID_PREVISTA IS NULL) 
		BEGIN
			INSERT INTO TB_VIO_PAGAMENTO
			VALUES (@data_carga, @VALOR, @COD_PAGAMENTO, @DATA_PAGAMENTO, @COD_UNIDADE, @COD_PLANO, @DATA_PREVISTA, getdate(), 'Id data prevista não existe')
		END 
		ELSE IF (@VALOR <= 0) 
		BEGIN
			INSERT INTO TB_VIO_PAGAMENTO
			VALUES (@data_carga, @VALOR, @COD_PAGAMENTO, @DATA_PAGAMENTO, @COD_UNIDADE, @COD_PLANO, @DATA_PREVISTA, getdate(), 'Valor invalido')
		END 
		
		ELSE
		BEGIN
			IF EXISTS (SELECT * FROM FATO_PAGAMENTO WHERE COD_PAGAMENTO = @COD_PAGAMENTO)
			BEGIN
				UPDATE FATO_PAGAMENTO
				SET VALOR = @VALOR,
					STATUS_ID = @ID_STATUS,
					UNIDADE_ID = @ID_UNIDADE,
					PLANO_ID = @ID_PLANO,
					DATA_PREVISTA = @ID_PREVISTA, 
					DATA_PAGAMENTO = @ID_PAGAMENTO
				WHERE COD_PAGAMENTO = @COD_PAGAMENTO
			END
			ELSE
			BEGIN
				INSERT INTO FATO_PAGAMENTO
				VALUES(@COD_PAGAMENTO, @VALOR, 1, @ID_STATUS, @ID_UNIDADE, @ID_PLANO, @ID_PREVISTA, @ID_PAGAMENTO) 
			END
		END
		FETCH C_PAGAMENTO INTO	@COD_PAGAMENTO, @VALOR, @COD_UNIDADE, 
								@COD_PLANO, @DATA_PREVISTA, @DATA_PAGAMENTO 
	END
	CLOSE C_PAGAMENTO
	DEALLOCATE C_PAGAMENTO
END

-- Testes

EXEC SP_FATO_PAGAMENTO '20240316'

SELECT * FROM TB_PAGAMENTO
SELECT * FROM TB_AUX_PAGAMENTO
SELECT * FROM FATO_PAGAMENTO

CREATE OR ALTER PROCEDURE SP_FATO_PAGAMENTO_UNIDADE_MENSAL
AS
BEGIN
	DELETE FATO_PAGAMENTO_UNIDADE_MENSAL

	INSERT INTO FATO_PAGAMENTO_UNIDADE_MENSAL
	
	SELECT S.ID_TEMPO, C.UNIDADE_ID, C.VALOR, C.QUANTIDADE	
	FROM (SELECT T.MES, T.ANO, P.UNIDADE_ID, SUM(P.VALOR) VALOR, SUM(P.QUANTIDADE) QUANTIDADE
			FROM FATO_PAGAMENTO P INNER JOIN DIM_TEMPO T
			ON(P.DATA_PAGAMENTO = T.ID_TEMPO)
			GROUP BY T.MES, T.ANO, P.UNIDADE_ID) C
	INNER JOIN (SELECT ID_TEMPO, MES, ANO
				FROM DIM_TEMPO
				WHERE NIVEL ='MES') S
	ON(C.MES = S.MES AND C.ANO = S.ANO)
END

EXEC SP_FATO_PAGAMENTO_UNIDADE_MENSAL

SELECT * FROM FATO_PAGAMENTO
SELECT * FROM FATO_PAGAMENTO_UNIDADE_MENSAL
